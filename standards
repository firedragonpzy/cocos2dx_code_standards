																									    cocos2d-x编码规范
　　                                                                                              --firedragonpzy
　                                                                                              　--2013、10、14
<I>：命名规则:
	（一）C++类/结构的命名：
　　1）类：类的名称都要以大写字母“C”开头，后跟一个或多个单词。为便于界定，每个单词的首字母要大写。
　　2）界面：由于界面与其它类概念上的巨大差别，规定界面类要以大写字母“I”开头。界面类描述一个服务（一组被命名的操作集合），在C＋＋中，界面与其它类间的最大区别在于，界面类中不包含任何数据结构（属性），也不包括任何具体的操作和实现，界面类通常仅包含一组纯虚函数的声明而不包含任何实现和数据。在一些其它语言中，一个界面也被称作一个接口及其实现契约。
　　3）类型：另一个与接口相似的概念是类型，类型与接口的不同点在于，类型可以包含部分接口的实现或包含一些接口默认的或不完整的实现，一个类型也可以包含一些属性。规定类型类要以大写字母“T”开头。例如：轿车类型 "TCar"、线程类型 "TThread" 等等。在C＋＋种，类型类也叫做结点类。
　　
　　小结：类的命名推荐用"名词"或"形容词＋名词"的形式

　　（二）函数：
　　1）保护成员函数：开头应当加上一个下划线“_”以示区别，例如："_setState()"
　　2）私有成员函数：开头应当加上两个下划线“__”，例如："__sestroyImp()"
　　3）回调和事件处理函数：习惯以单词“on”开头。例如："_onTimer()", "onExit()"
　　4）虚函数：回调函数以外的虚函数习惯以“do”开头，如："doRefresh()", "_doEncryption()"

		注意：
　　私有成员函数的层次结构表示：
　　通常来说，在一个类中，公有方法、保护方法和私有方法所完成的任务总是呈现一种逐级依次细化的层次结构（意即：保护方法所实现的功能通常比该类中的公有方法更为细小琐碎；类似地，私有方法的功能也比其保护方法更具原子性）。因此，对于遵循以上规则，并且功能较为复杂的类，在按照“公有、保护、私有”的三级形式划分以后，如果其私有成员中仍然存在明显不同的功能粒度，则可以通过追加更多下划线前缀的形式予以表示
　　例如：由三个下划线开头的私有方法“___pushCdr”就要比同一类中，仅由两个下划线开头的私有方法“__mergeConCall”所完成的功能粒度更细小、更琐碎；而四个下划线开头的“____calcCompensate”则比“___pushCdr”完成的功能 更具原子性。
　　如果发现类中的功能层数太多（从公有方法到最“原子”的私有方法间，一般不应该超过7层），那通常反应一个不良的设计。此时请检查这个类的功能是否过于臃肿，已使接口显得不太清晰。另外一个常见的问题是将无需访问该类中私有或保护成员的功能定义成了方法。第一个问题可以通过重新划分类层次结构或将一个类分裂为多个类等方法解决。对于第二个问题，由于这些方法无需访问受限成员，大多数时候都可以把它们转变成局部函数（放在无名空间或使用“static”前缀定义）。
　　成员函数的下划线后缀命名：
　　对一些本应该作为保护或私有成员的函数，由于设计方面的其它考虑（例如：灵活性、功能等方面）将其提升为公有成员的，应该在其后面添加与其原本访问控制级别相应的下划线后缀。
　　另外，对于其它不推荐直接使用的成员函数（例如：会引起兼容性或可移植性方面问题的函数），也应当在其后面加相应下划线提示。
　　例如："ioctl_()", "setSysOpt_()", "getSysOpt_()", "preParser__()"

　　小结：推荐的组成形式：函数名应当使用"动词"或者"动词＋名词"（动宾词组）的形式。例如："getName()", "setValue()", "erase()", "reserve()"



		（三）变量：
　　命名规则：由作用域前缀＋类型前缀＋一个或多个单词组成。为便于界定，每个单词的首字母要大写。
				
				作用域前缀：作用域前缀标明一个变量的可见范围。作用域可以有如下几			种：
					前缀	 说明
					无	 	 局部变量
					m_		 类的成员变量（member）
					sm_		 类的静态成员变量（static member）
					s_		 静态变量（static）
					g_		 外部全局变量（global）
					sg_		 静态全局变量（static global）
					gg_		 进程或动态链接库间共享的全局变量（global global）

				类型前缀：类型前缀标明一个变量的类型，可以有如下几种：
					前缀	说明
					n	 	整型和位域变量（number）
					e		枚举型变量（enumeration）
					c	 	字符型变量（char）
					b	 	布尔型变量（bool）
					f	 	浮点型变量（float）
					p	 	指针型变量和迭代子（pointer）
					pfn	 	指向函数的指针变量或指向函数对象的指针（pointer of 							function）
					pm	 	指向成员的指针（pointer of member）
					r	 	引用（reference），此前缀对于常引用（const reference）来							说可以省略
					g	 	数组（grid）
					fo	 	函数对象（Function Object）
					i	 	类的实例（instance）

　　对于经常用到的类，也可以定义一些专门的前缀，如：std::string和std::wstring类的前缀可以定义为"st"，std::vector类的前缀可以定义为"v"等等。
　　类型前缀可以组合使用，例如"gc"表示字符数组，"ppn"表示指向整型的指针的指针等等。

				小结：变量的名字应当使用"名词"或者"形容词＋名词"。例如："nCode", 			"m_nState"，"nMaxWidth"



		（四）常量
				命名：类型前缀＋全大写字母组成，单词间通过下划线来界定


		（五）枚举、联合、typedef
　　枚举、联合的命名：由枚举、联合语句定义的类型名由全大写字母组成，单词间通过下划线来界定，如：FAR_PROC, ERROR_TYPE
　　typedef的命名：通常情况下，typedef语句定义的类型名，其命名规范与枚举及联合语句相同，也采用大写字母加下划线的原则。但是在定义一个模板类实例的别名时，为清晰起见，可以考虑酌情使用类的命名原则，例如：
					typedef CWriter< CSysFile > CSysFileWriter;
					typedef std::vector< int > VINT;


		（六）宏、枚举值
　　命名：宏和枚举值由全大写字母组成，单词间通过下划线来界定，如：ERROR_UNKNOWN, OP_STOP


----------------------------------------------------------待续-------------------------------------------------------------
